<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="hetero" minver="1.9.12">
<author email="yinung.yang@gmail.com">Yi-Nung Yang</author>
<version>1.2</version>
<date>2017-11-06</date>
<description>Heterosckedasticity tests in Asteriou &amp; Hall</description>
<tags>C12 C10</tags>
<help>
Package: hetero 1.2 (2017-06-06)
Author: Yi-Nung Yang
Required gretl version: 2011a
Data requirement: some sort of dataset
Description: Heteroskedasticity tests in Asteriou &amp; Hall's textbook

Help text:

This package perform several tests for heteroskedasticity after an embeded OLS estimation in Chapter 6 of Asteriou and Hall, Applied Econometrics, 2nd ed., New York : Palgrave Macmillan, 2011. These tests include Breusch-Pagan LM, Glesjer LM, Harvey-Godfrey LM, Park LM, White LM (no cross), and White LM (with cross).

Usage:

hetero(y, xlist, b3, b4, b5, b6, b7, b8, b9)
y: 	dependent variable
xlist:	regressors list
The third~to the eighth parameters are boolean to specify what kind of heteroskedasticity tests is to be done.
They are for &quot;Breusch-Pagan LM&quot;,,&quot;Glesjer LM&quot;,&quot;Harvey-Godfrey LM&quot;,&quot;Park LM&quot;,&quot;White's test (cross terms)&quot;,&quot;White's test (no cross terms)&quot;,&quot;Verbosity&quot;, respectively.
The ninth parameter determine to show the verbosity of these tests.

hetero.gfn changelog:
2017/06/06
    version 1.1: Fix the use of &quot;=&quot; as a Boolean operator.
2012/12/12
    version 1.0: first release.
</help>
<gretl-function name="hetero" type="void">
 <params count="9">
  <param name="y" type="series">
<description>Dependent Variable</description>
  </param>
  <param name="X" type="list" optional="true">
<description>regressors</description>
  </param>
  <param name="BP" type="bool" default="0">
<description>Breusch-Pagan LM</description>
  </param>
  <param name="GR" type="bool" default="0">
<description>Glesjer LM</description>
  </param>
  <param name="HG" type="bool" default="0">
<description>Harvey-Godfrey LM</description>
  </param>
  <param name="Park" type="bool" default="0">
<description>Park LM</description>
  </param>
  <param name="White" type="bool" default="0">
<description>White's test (cross terms)</description>
  </param>
  <param name="Whitec" type="bool" default="0">
<description>White's test (no cross terms)</description>
  </param>
  <param name="verbose" type="bool" default="0">
<description>Verbosity</description>
  </param>
 </params>
<code>GQ=0
# --- verbosity
if verbose
  string para =&quot;&quot;
  string para2=&quot;&quot;
else
  string para =&quot; --quiet &quot;
  string para2=&quot; --silent &quot;
endif
printf &quot;===============================================\n&quot;
printf &quot;      Heteroskedasticity Tests\n\n&quot;
printf &quot;          by Yi-Nung Yang\n&quot;
printf &quot;      Dept. of IB, CYCU, Taiwan. \n&quot;
printf &quot;-----------------------------------------------&quot;
#    printf &quot;Tests\t\t\t Statistic\t\tp-value\n&quot;
#    printf &quot;-----------------------------------------------\n&quot;
# --- OLS ---
ols y X @para
series ut=$uhat
series utsq=$uhat^2
series absut=abs($uhat)
series lnutsq=ln(utsq)
if BP
  ols utsq X @para
  scalar LM_BP=$T*$rsq
  scalar df=$ncoeff-1
  scalar pv_BP = pvalue(c,df,LM_BP)
  #    printf &quot;Breusch-Pagan LM\t %.6f\t%.3f\n&quot;,LM_BP,pv_BP
endif
if GR
  ols absut X @para
  scalar LM_GR=$T*$rsq
  scalar df=$ncoeff-1
  scalar pv_GR = pvalue(c,df,LM_GR)
  #    printf &quot;Glesjer LM\t\t %.6f\t%.3f\n&quot;,LM_GR, pv_GR
endif
if HG
  ols lnutsq X @para
  scalar LM_HG=$T*$rsq
  scalar df=$ncoeff-1
  scalar pv_HG = pvalue(c,df,LM_HG)
  #    printf &quot;Harvey-Godfrey LM\t %.6f\t%.3f\n&quot;,LM_HG,pv_HG
endif
if Park
  #--- 先判斷 X 是否含 const
  tL2 = X
  tL3 = X || const
  genr is_const = (tL2 == tL3)
  if is_const == 1
    list xx = X - const
    list lnxx=ln(xx)
    ols lnutsq const lnxx @para
  else # --- no const in regressors
    list lnxx=ln(X)
    ols lnutsq lnxx @para
  endif
  scalar LM_Park=$T*$rsq
  scalar df=$ncoeff-1
  scalar pv_Park = pvalue(c,df,LM_Park)
  #    printf &quot;Park LM\t\t\t %.6f\t%.3f\n&quot;,LM_Park,pv_Park
endif
if GQ
  if cOmit==0
    cOmit=int($T/6)
  endif
  #  set echo on
  #  set messages on
  #dataset sortby X_sort
  scalar nob_sub = int(($T-cOmit)/2)
  smpl $t1 nob_sub
  ols y const X1 @para
  scalar rss1=$ess
  scalar nobs1=$T
  smpl full
  scalar sob=nob_sub+cOmit
  scalar eob=$t2
  smpl sob eob
  ols y const X1 @para
  scalar rss2=$ess
  scalar nobs2=$T
  scalar F_GQ=rss1/rss2
  scalar pv_GQ=pvalue(f,nobs1,nobs2,F_GQ)
  #    printf &quot;Goldfeld-Quandt F\t %.6f\t%.3f\n&quot;,F_GQ,pv_GQ
  smpl full
endif
if White
  ols y X @para
  modtest --white-nocross @para2
  scalar LM_white=$test
  scalar pv_white=$pvalue
  #    printf &quot;White LM (no cross)\t %.6f\t%.3f\n&quot;,LM_white,pv_white
endif
if Whitec
  ols y X @para
  modtest --white @para2
  scalar LM_whitec=$test
  scalar pv_whitec=$pvalue
  #printf &quot;White LM (with cross)\t %.6f\t%.3f\n&quot;,LM_whitec,pv_whitec
endif
#  if verbose --- print below anyway!
printf &quot;\n\n\n&quot;
printf &quot;===============================================\n&quot;
printf &quot;      Heteroskedasticity Tests\n&quot;
printf &quot;-----------------------------------------------\n&quot;
printf &quot;Tests\t\t\t Statistic\tp-value\n&quot;
printf &quot;-----------------------------------------------\n&quot;
if BP
  printf &quot;Breusch-Pagan LM\t %.6f\t%.3f\n&quot;,LM_BP,pv_BP
endif
if GR
  printf &quot;Glesjer LM\t\t %.6f\t%.3f\n&quot;,LM_GR, pv_GR
endif
if HG
  printf &quot;Harvey-Godfrey LM\t %.6f\t%.3f\n&quot;,LM_HG,pv_HG
endif
if Park
  printf &quot;Park LM\t\t\t %.6f\t%.3f\n&quot;,LM_Park,pv_Park
endif
if GQ
  printf &quot;Goldfeld-Quandt F\t %.6f\t%.3f\n&quot;,F_GQ,pv_GQ
endif
if White
  printf &quot;White LM (no cross)\t %.6f\t%.3f\n&quot;,LM_white,pv_white
endif
if Whitec
  printf &quot;White LM (with cross)\t %.6f\t%.3f\n&quot;,LM_whitec,pv_whitec
endif
#  endif
printf &quot;===============================================\n&quot;
bundle bdl
return
</code>
</gretl-function>
<sample-script>
#------------------------------------------------
# It is more convenient to use GUI of this 
# package instead of the following codes.
#------------------------------------------------
open data3-1.gdt
include hetero.gfn
genr sqft2=sqft^2
list xlist = const sqft sqft2
hetero(price, xlist, 1, 1, 1, 1, 1, 1, 0)
</sample-script>
</gretl-function-package>
</gretl-functions>
